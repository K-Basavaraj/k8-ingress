apiVersion: apps/v1     
kind: Deployment       
metadata:
  name: app1           
  labels:                
    app: app1
    tier: frontend
spec:
  replicas: 1            #Create 3 identical Pods.
  selector:              #these are used to select the pod to create replicas (This tells ReplicaSet:"Look for pods that have these labels."If a pod matches, it's part of the ReplicaSet.)
    matchLabels:
      app: app1
      tier: frontend                      
  template:              #this is pod template(or)pod defination (Pod Template â€” What kind of pod should be created)
    metadata:
      labels:            #this lables belong to pod (Any new pods created by this ReplicaSet will have these labels.)
        app: app1
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: basavaraj0509/app1:v1

---
#clusterip service
kind: Service
apiVersion: v1 

metadata: 
  name: nginx 

spec: 
  selector:
    app: app1
    tier: frontend
  ports: 
  - name: nginx-service-port 
    protocol: TCP
    port: 80 #this is service port 
    targetPort: 80  #this is container port here you can use names of the ports aswell example: http-web-svc
---
# https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/examples/echo_server/
# this ingress will create ALB
# https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/guide/ingress/annotations/
# we need to create certificate (AWSCM)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
    name: app1
    # namespace: echoserver
    annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:688567303455:certificate/a5c1711b-3c47-4f14-b446-04f5fba90c31
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
        alb.ingress.kubernetes.io/tags: Environment=dev,Team=test
        alb.ingress.kubernetes.io/group.name: expense
spec:
    rules:
    - host: "app1.basavadevops81s.online"
      http:
        paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: app1
              port:
                number: 80